---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Hero from "../components/Hero.astro";
import Projects from "../components/Projects.astro";
import Footer from "../components/Footer.astro";
---

<Layout>
  <main
    class="min-h-screen flex gap-y-20 flex-col justify-between px-8 relative"
  >
    <div class="noise-overlay absolute inset-0 -z-5"></div>

    <!-- filtro goo -->
    <svg class="fixed w-0 h-0">
      <filter id="goo">
        <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur"
        ></feGaussianBlur>
        <feColorMatrix
          in="blur"
          mode="matrix"
          values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8"
          result="goo"></feColorMatrix>
        <feBlend in="SourceGraphic" in2="goo"></feBlend>
      </filter>
    </svg>

    <div
      class="fixed goo-blur -z-10 h-screen inset-0 pointer-events-none bg-no-repeat bg-[linear-gradient(40deg,rgb(var(--bg-dark)),rgb(var(--bg-light)))]"
    >
      <!-- g1: cyan, sube-baja (moveVertical) -->
      <div
        class="absolute inset-1/2 w-[var(--circle-size)] h-[var(--circle-size)]
                  -translate-x-1/2 -translate-y-1/2
                  bg-[radial-gradient(circle,rgba(var(--clr-cyan)_/_0.8)_0%,rgba(var(--clr-cyan)_/_0)_50%)]
                  mix-blend-[var(--blending)]
                  animate-[var(--animate-vert-30)]"
      >
      </div>

      <!-- g2: lime, círculo reversed -->
      <div
        class="absolute inset-1/2 w-[var(--circle-size)] h-[var(--circle-size)]
                  -translate-x-1/2 -translate-y-1/2
                  origin-[calc(50%_-_400px)]
                  bg-[radial-gradient(circle,rgba(var(--clr-lime)_/_0.8)_0%,rgba(var(--clr-lime)_/_0)_50%)]
                  mix-blend-[var(--blending)]
                  animate-[var(--animate-circle-20R)]"
      >
      </div>

      <!-- g3: violeta (complemento lime), círculo grande -->
      <div
        class="absolute
                  top-[calc(50%_+_200px)] left-[calc(50%_-_500px)]
                  w-[var(--circle-size)] h-[var(--circle-size)]
                  origin-[calc(50%_+_400px)]
                  bg-[radial-gradient(circle,rgba(var(--clr-lime-comp)_/_0.8)_0%,rgba(var(--clr-lime-comp)_/_0)_50%)]
                  mix-blend-[var(--blending)]
                  animate-[var(--animate-circle-40)]"
      >
      </div>

      <!-- g4: rojo (complemento cyan), horizontal -->
      <div
        class="absolute inset-1/2 opacity-70
                  w-[var(--circle-size)] h-[var(--circle-size)]
                  -translate-x-1/2 -translate-y-1/2
                  origin-[calc(50%_-_200px)]
                  bg-[radial-gradient(circle,rgba(var(--clr-cyan-comp)_/_0.8)_0%,rgba(var(--clr-cyan-comp)_/_0)_50%)]
                  mix-blend-[var(--blending)]
                  animate-[var(--animate-horz-40)]"
      >
      </div>

      <!-- g5 (opcional interactive): cyan soft -->
      <div
        class="interactive absolute goo-blur -top-1/2 -left-1/2 w-full h-full opacity-70
                  bg-[radial-gradient(circle,rgba(var(--clr-cyan)_/_0.6)_0%,rgba(var(--clr-cyan)_/_0)_50%)]
                  mix-blend-[var(--blending)]"
      >
      </div>
    </div>
    <Header />
    <Hero />
    <Projects />
    <!-- Lógica de “interactive bubble” en un <script> -->
    <script lang="ts" is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        console.log("Entre");
        const interBubble =
          document.querySelector<HTMLDivElement>(".interactive");
        console.log(interBubble);
        if (!interBubble) return;

        // Anchura y altura de la ventana
        let vw = window.innerWidth;
        let vh = window.innerHeight;

        // Inicializamos el objetivo en el centro de la pantalla
        let curX = vw;
        let curY = vh;
        let tgX = vw;
        let tgY = vh;

        // Mueve la burbuja suavemente hacia (tgX - vw/2, tgY - vh/2)
        function move() {
          // Interpolación suave
          curX += (tgX - curX) / 20;
          curY += (tgY - curY) / 20;

          // Convertimos a coordenadas relativas al centro (por el -50%/-50% CSS)
          const x = Math.round(curX - vw / 2);
          const y = Math.round(curY - vh / 2);

          interBubble.style.transform = `translate(${x}px, ${y}px)`;
          requestAnimationFrame(move);
        }

        // Cuando el usuario mueva el ratón, actualizamos el target (tgX, tgY)
        console.log("Entre");
        window.addEventListener("mousemove", (event) => {
          tgX = event.clientX;
          tgY = event.clientY;
          console.log("move");
        });

        // Si la ventana se redimensiona, recalculamos vw/vh para no desalinear
        window.addEventListener("resize", () => {
          vw = window.innerWidth;
          vh = window.innerHeight;
        });

        move();
      });
    </script>
  </main>
  <Footer />
</Layout>
